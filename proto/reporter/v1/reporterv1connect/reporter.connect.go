// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/reporter/v1/reporter.proto

package reporterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v11 "dummyApp/gen/proto/relation/v1"
	v1 "dummyApp/gen/proto/reporter/v1"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReporterServiceName is the fully-qualified name of the ReporterService service.
	ReporterServiceName = "proto.reporter.v1.ReporterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReporterServiceCreateProcedure is the fully-qualified name of the ReporterService's Create RPC.
	ReporterServiceCreateProcedure = "/proto.reporter.v1.ReporterService/Create"
	// ReporterServiceGetProcedure is the fully-qualified name of the ReporterService's Get RPC.
	ReporterServiceGetProcedure = "/proto.reporter.v1.ReporterService/Get"
	// ReporterServiceListProcedure is the fully-qualified name of the ReporterService's List RPC.
	ReporterServiceListProcedure = "/proto.reporter.v1.ReporterService/List"
	// ReporterServiceUpdateProcedure is the fully-qualified name of the ReporterService's Update RPC.
	ReporterServiceUpdateProcedure = "/proto.reporter.v1.ReporterService/Update"
	// ReporterServiceAddRelationProcedure is the fully-qualified name of the ReporterService's
	// AddRelation RPC.
	ReporterServiceAddRelationProcedure = "/proto.reporter.v1.ReporterService/AddRelation"
	// ReporterServiceRemoveRelationProcedure is the fully-qualified name of the ReporterService's
	// RemoveRelation RPC.
	ReporterServiceRemoveRelationProcedure = "/proto.reporter.v1.ReporterService/RemoveRelation"
	// ReporterServiceAddSetlistProcedure is the fully-qualified name of the ReporterService's
	// AddSetlist RPC.
	ReporterServiceAddSetlistProcedure = "/proto.reporter.v1.ReporterService/AddSetlist"
	// ReporterServiceRemoveSetlistProcedure is the fully-qualified name of the ReporterService's
	// RemoveSetlist RPC.
	ReporterServiceRemoveSetlistProcedure = "/proto.reporter.v1.ReporterService/RemoveSetlist"
)

// ReporterServiceClient is a client for the proto.reporter.v1.ReporterService service.
type ReporterServiceClient interface {
	Create(context.Context, *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.Reporter], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Update(context.Context, *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error)
	AddRelation(context.Context, *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error)
	RemoveRelation(context.Context, *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error)
	AddSetlist(context.Context, *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error)
	RemoveSetlist(context.Context, *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error)
}

// NewReporterServiceClient constructs a client for the proto.reporter.v1.ReporterService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReporterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReporterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reporterServiceMethods := v1.File_proto_reporter_v1_reporter_proto.Services().ByName("ReporterService").Methods()
	return &reporterServiceClient{
		create: connect.NewClient[v1.Reporter, v1.Reporter](
			httpClient,
			baseURL+ReporterServiceCreateProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.Reporter](
			httpClient,
			baseURL+ReporterServiceGetProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+ReporterServiceListProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.Reporter, v1.Reporter](
			httpClient,
			baseURL+ReporterServiceUpdateProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		addRelation: connect.NewClient[v11.Relation, emptypb.Empty](
			httpClient,
			baseURL+ReporterServiceAddRelationProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("AddRelation")),
			connect.WithClientOptions(opts...),
		),
		removeRelation: connect.NewClient[v11.Relation, emptypb.Empty](
			httpClient,
			baseURL+ReporterServiceRemoveRelationProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("RemoveRelation")),
			connect.WithClientOptions(opts...),
		),
		addSetlist: connect.NewClient[v1.Setlist, emptypb.Empty](
			httpClient,
			baseURL+ReporterServiceAddSetlistProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("AddSetlist")),
			connect.WithClientOptions(opts...),
		),
		removeSetlist: connect.NewClient[v1.Setlist, emptypb.Empty](
			httpClient,
			baseURL+ReporterServiceRemoveSetlistProcedure,
			connect.WithSchema(reporterServiceMethods.ByName("RemoveSetlist")),
			connect.WithClientOptions(opts...),
		),
	}
}

// reporterServiceClient implements ReporterServiceClient.
type reporterServiceClient struct {
	create         *connect.Client[v1.Reporter, v1.Reporter]
	get            *connect.Client[v1.GetRequest, v1.Reporter]
	list           *connect.Client[v1.ListRequest, v1.ListResponse]
	update         *connect.Client[v1.Reporter, v1.Reporter]
	addRelation    *connect.Client[v11.Relation, emptypb.Empty]
	removeRelation *connect.Client[v11.Relation, emptypb.Empty]
	addSetlist     *connect.Client[v1.Setlist, emptypb.Empty]
	removeSetlist  *connect.Client[v1.Setlist, emptypb.Empty]
}

// Create calls proto.reporter.v1.ReporterService.Create.
func (c *reporterServiceClient) Create(ctx context.Context, req *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls proto.reporter.v1.ReporterService.Get.
func (c *reporterServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.Reporter], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls proto.reporter.v1.ReporterService.List.
func (c *reporterServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Update calls proto.reporter.v1.ReporterService.Update.
func (c *reporterServiceClient) Update(ctx context.Context, req *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error) {
	return c.update.CallUnary(ctx, req)
}

// AddRelation calls proto.reporter.v1.ReporterService.AddRelation.
func (c *reporterServiceClient) AddRelation(ctx context.Context, req *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error) {
	return c.addRelation.CallUnary(ctx, req)
}

// RemoveRelation calls proto.reporter.v1.ReporterService.RemoveRelation.
func (c *reporterServiceClient) RemoveRelation(ctx context.Context, req *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error) {
	return c.removeRelation.CallUnary(ctx, req)
}

// AddSetlist calls proto.reporter.v1.ReporterService.AddSetlist.
func (c *reporterServiceClient) AddSetlist(ctx context.Context, req *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error) {
	return c.addSetlist.CallUnary(ctx, req)
}

// RemoveSetlist calls proto.reporter.v1.ReporterService.RemoveSetlist.
func (c *reporterServiceClient) RemoveSetlist(ctx context.Context, req *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error) {
	return c.removeSetlist.CallUnary(ctx, req)
}

// ReporterServiceHandler is an implementation of the proto.reporter.v1.ReporterService service.
type ReporterServiceHandler interface {
	Create(context.Context, *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.Reporter], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Update(context.Context, *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error)
	AddRelation(context.Context, *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error)
	RemoveRelation(context.Context, *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error)
	AddSetlist(context.Context, *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error)
	RemoveSetlist(context.Context, *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error)
}

// NewReporterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReporterServiceHandler(svc ReporterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reporterServiceMethods := v1.File_proto_reporter_v1_reporter_proto.Services().ByName("ReporterService").Methods()
	reporterServiceCreateHandler := connect.NewUnaryHandler(
		ReporterServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(reporterServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	reporterServiceGetHandler := connect.NewUnaryHandler(
		ReporterServiceGetProcedure,
		svc.Get,
		connect.WithSchema(reporterServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	reporterServiceListHandler := connect.NewUnaryHandler(
		ReporterServiceListProcedure,
		svc.List,
		connect.WithSchema(reporterServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	reporterServiceUpdateHandler := connect.NewUnaryHandler(
		ReporterServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(reporterServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	reporterServiceAddRelationHandler := connect.NewUnaryHandler(
		ReporterServiceAddRelationProcedure,
		svc.AddRelation,
		connect.WithSchema(reporterServiceMethods.ByName("AddRelation")),
		connect.WithHandlerOptions(opts...),
	)
	reporterServiceRemoveRelationHandler := connect.NewUnaryHandler(
		ReporterServiceRemoveRelationProcedure,
		svc.RemoveRelation,
		connect.WithSchema(reporterServiceMethods.ByName("RemoveRelation")),
		connect.WithHandlerOptions(opts...),
	)
	reporterServiceAddSetlistHandler := connect.NewUnaryHandler(
		ReporterServiceAddSetlistProcedure,
		svc.AddSetlist,
		connect.WithSchema(reporterServiceMethods.ByName("AddSetlist")),
		connect.WithHandlerOptions(opts...),
	)
	reporterServiceRemoveSetlistHandler := connect.NewUnaryHandler(
		ReporterServiceRemoveSetlistProcedure,
		svc.RemoveSetlist,
		connect.WithSchema(reporterServiceMethods.ByName("RemoveSetlist")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.reporter.v1.ReporterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReporterServiceCreateProcedure:
			reporterServiceCreateHandler.ServeHTTP(w, r)
		case ReporterServiceGetProcedure:
			reporterServiceGetHandler.ServeHTTP(w, r)
		case ReporterServiceListProcedure:
			reporterServiceListHandler.ServeHTTP(w, r)
		case ReporterServiceUpdateProcedure:
			reporterServiceUpdateHandler.ServeHTTP(w, r)
		case ReporterServiceAddRelationProcedure:
			reporterServiceAddRelationHandler.ServeHTTP(w, r)
		case ReporterServiceRemoveRelationProcedure:
			reporterServiceRemoveRelationHandler.ServeHTTP(w, r)
		case ReporterServiceAddSetlistProcedure:
			reporterServiceAddSetlistHandler.ServeHTTP(w, r)
		case ReporterServiceRemoveSetlistProcedure:
			reporterServiceRemoveSetlistHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReporterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReporterServiceHandler struct{}

func (UnimplementedReporterServiceHandler) Create(context.Context, *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.Create is not implemented"))
}

func (UnimplementedReporterServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.Reporter], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.Get is not implemented"))
}

func (UnimplementedReporterServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.List is not implemented"))
}

func (UnimplementedReporterServiceHandler) Update(context.Context, *connect.Request[v1.Reporter]) (*connect.Response[v1.Reporter], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.Update is not implemented"))
}

func (UnimplementedReporterServiceHandler) AddRelation(context.Context, *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.AddRelation is not implemented"))
}

func (UnimplementedReporterServiceHandler) RemoveRelation(context.Context, *connect.Request[v11.Relation]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.RemoveRelation is not implemented"))
}

func (UnimplementedReporterServiceHandler) AddSetlist(context.Context, *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.AddSetlist is not implemented"))
}

func (UnimplementedReporterServiceHandler) RemoveSetlist(context.Context, *connect.Request[v1.Setlist]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.reporter.v1.ReporterService.RemoveSetlist is not implemented"))
}
