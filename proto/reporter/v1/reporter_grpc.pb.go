// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/reporter/v1/reporter.proto

package reporterv1

import (
	context "context"
	v1 "dummyApp/gen/proto/relation/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReporterService_Create_FullMethodName         = "/proto.reporter.v1.ReporterService/Create"
	ReporterService_Get_FullMethodName            = "/proto.reporter.v1.ReporterService/Get"
	ReporterService_List_FullMethodName           = "/proto.reporter.v1.ReporterService/List"
	ReporterService_Update_FullMethodName         = "/proto.reporter.v1.ReporterService/Update"
	ReporterService_AddRelation_FullMethodName    = "/proto.reporter.v1.ReporterService/AddRelation"
	ReporterService_RemoveRelation_FullMethodName = "/proto.reporter.v1.ReporterService/RemoveRelation"
	ReporterService_AddSetlist_FullMethodName     = "/proto.reporter.v1.ReporterService/AddSetlist"
	ReporterService_RemoveSetlist_FullMethodName  = "/proto.reporter.v1.ReporterService/RemoveSetlist"
)

// ReporterServiceClient is the client API for ReporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReporterServiceClient interface {
	Create(ctx context.Context, in *Reporter, opts ...grpc.CallOption) (*Reporter, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Reporter, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Update(ctx context.Context, in *Reporter, opts ...grpc.CallOption) (*Reporter, error)
	AddRelation(ctx context.Context, in *v1.Relation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRelation(ctx context.Context, in *v1.Relation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddSetlist(ctx context.Context, in *Setlist, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSetlist(ctx context.Context, in *Setlist, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type reporterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReporterServiceClient(cc grpc.ClientConnInterface) ReporterServiceClient {
	return &reporterServiceClient{cc}
}

func (c *reporterServiceClient) Create(ctx context.Context, in *Reporter, opts ...grpc.CallOption) (*Reporter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reporter)
	err := c.cc.Invoke(ctx, ReporterService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Reporter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reporter)
	err := c.cc.Invoke(ctx, ReporterService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ReporterService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) Update(ctx context.Context, in *Reporter, opts ...grpc.CallOption) (*Reporter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reporter)
	err := c.cc.Invoke(ctx, ReporterService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) AddRelation(ctx context.Context, in *v1.Relation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReporterService_AddRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) RemoveRelation(ctx context.Context, in *v1.Relation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReporterService_RemoveRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) AddSetlist(ctx context.Context, in *Setlist, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReporterService_AddSetlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) RemoveSetlist(ctx context.Context, in *Setlist, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReporterService_RemoveSetlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReporterServiceServer is the server API for ReporterService service.
// All implementations must embed UnimplementedReporterServiceServer
// for forward compatibility.
type ReporterServiceServer interface {
	Create(context.Context, *Reporter) (*Reporter, error)
	Get(context.Context, *GetRequest) (*Reporter, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Update(context.Context, *Reporter) (*Reporter, error)
	AddRelation(context.Context, *v1.Relation) (*emptypb.Empty, error)
	RemoveRelation(context.Context, *v1.Relation) (*emptypb.Empty, error)
	AddSetlist(context.Context, *Setlist) (*emptypb.Empty, error)
	RemoveSetlist(context.Context, *Setlist) (*emptypb.Empty, error)
	mustEmbedUnimplementedReporterServiceServer()
}

// UnimplementedReporterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReporterServiceServer struct{}

func (UnimplementedReporterServiceServer) Create(context.Context, *Reporter) (*Reporter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReporterServiceServer) Get(context.Context, *GetRequest) (*Reporter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReporterServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReporterServiceServer) Update(context.Context, *Reporter) (*Reporter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReporterServiceServer) AddRelation(context.Context, *v1.Relation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRelation not implemented")
}
func (UnimplementedReporterServiceServer) RemoveRelation(context.Context, *v1.Relation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRelation not implemented")
}
func (UnimplementedReporterServiceServer) AddSetlist(context.Context, *Setlist) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSetlist not implemented")
}
func (UnimplementedReporterServiceServer) RemoveSetlist(context.Context, *Setlist) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSetlist not implemented")
}
func (UnimplementedReporterServiceServer) mustEmbedUnimplementedReporterServiceServer() {}
func (UnimplementedReporterServiceServer) testEmbeddedByValue()                         {}

// UnsafeReporterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReporterServiceServer will
// result in compilation errors.
type UnsafeReporterServiceServer interface {
	mustEmbedUnimplementedReporterServiceServer()
}

func RegisterReporterServiceServer(s grpc.ServiceRegistrar, srv ReporterServiceServer) {
	// If the following call pancis, it indicates UnimplementedReporterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReporterService_ServiceDesc, srv)
}

func _ReporterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reporter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).Create(ctx, req.(*Reporter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reporter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).Update(ctx, req.(*Reporter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_AddRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).AddRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_AddRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).AddRelation(ctx, req.(*v1.Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_RemoveRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).RemoveRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_RemoveRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).RemoveRelation(ctx, req.(*v1.Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_AddSetlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).AddSetlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_AddSetlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).AddSetlist(ctx, req.(*Setlist))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_RemoveSetlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setlist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).RemoveSetlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReporterService_RemoveSetlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).RemoveSetlist(ctx, req.(*Setlist))
	}
	return interceptor(ctx, in, info, handler)
}

// ReporterService_ServiceDesc is the grpc.ServiceDesc for ReporterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReporterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.reporter.v1.ReporterService",
	HandlerType: (*ReporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReporterService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReporterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ReporterService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReporterService_Update_Handler,
		},
		{
			MethodName: "AddRelation",
			Handler:    _ReporterService_AddRelation_Handler,
		},
		{
			MethodName: "RemoveRelation",
			Handler:    _ReporterService_RemoveRelation_Handler,
		},
		{
			MethodName: "AddSetlist",
			Handler:    _ReporterService_AddSetlist_Handler,
		},
		{
			MethodName: "RemoveSetlist",
			Handler:    _ReporterService_RemoveSetlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reporter/v1/reporter.proto",
}
