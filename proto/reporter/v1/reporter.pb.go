// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/reporter/v1/reporter.proto

package reporterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "dummyApp/gen/proto/operator/v1"
	v1 "dummyApp/gen/proto/relation/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldEnum int32

const (
	FieldEnum_FIELD_ID        FieldEnum = 0
	FieldEnum_FIELD_USER_ID   FieldEnum = 1
	FieldEnum_FIELD_FIRSTNAME FieldEnum = 2
	FieldEnum_FIELD_LASTNAME  FieldEnum = 3
)

// Enum value maps for FieldEnum.
var (
	FieldEnum_name = map[int32]string{
		0: "FIELD_ID",
		1: "FIELD_USER_ID",
		2: "FIELD_FIRSTNAME",
		3: "FIELD_LASTNAME",
	}
	FieldEnum_value = map[string]int32{
		"FIELD_ID":        0,
		"FIELD_USER_ID":   1,
		"FIELD_FIRSTNAME": 2,
		"FIELD_LASTNAME":  3,
	}
)

func (x FieldEnum) Enum() *FieldEnum {
	p := new(FieldEnum)
	*p = x
	return p
}

func (x FieldEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_reporter_v1_reporter_proto_enumTypes[0].Descriptor()
}

func (FieldEnum) Type() protoreflect.EnumType {
	return &file_proto_reporter_v1_reporter_proto_enumTypes[0]
}

func (x FieldEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldEnum.Descriptor instead.
func (FieldEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{0}
}

type SortEnum int32

const (
	SortEnum_SORT_FIRSTNAME SortEnum = 0
	SortEnum_SORT_LASTNAME  SortEnum = 1
	SortEnum_SORT_STATUS    SortEnum = 2
)

// Enum value maps for SortEnum.
var (
	SortEnum_name = map[int32]string{
		0: "SORT_FIRSTNAME",
		1: "SORT_LASTNAME",
		2: "SORT_STATUS",
	}
	SortEnum_value = map[string]int32{
		"SORT_FIRSTNAME": 0,
		"SORT_LASTNAME":  1,
		"SORT_STATUS":    2,
	}
)

func (x SortEnum) Enum() *SortEnum {
	p := new(SortEnum)
	*p = x
	return p
}

func (x SortEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_reporter_v1_reporter_proto_enumTypes[1].Descriptor()
}

func (SortEnum) Type() protoreflect.EnumType {
	return &file_proto_reporter_v1_reporter_proto_enumTypes[1]
}

func (x SortEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortEnum.Descriptor instead.
func (SortEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{1}
}

type StatusEnum int32

const (
	StatusEnum_active StatusEnum = 0
	StatusEnum_locked StatusEnum = 1
)

// Enum value maps for StatusEnum.
var (
	StatusEnum_name = map[int32]string{
		0: "active",
		1: "locked",
	}
	StatusEnum_value = map[string]int32{
		"active": 0,
		"locked": 1,
	}
)

func (x StatusEnum) Enum() *StatusEnum {
	p := new(StatusEnum)
	*p = x
	return p
}

func (x StatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_reporter_v1_reporter_proto_enumTypes[2].Descriptor()
}

func (StatusEnum) Type() protoreflect.EnumType {
	return &file_proto_reporter_v1_reporter_proto_enumTypes[2]
}

func (x StatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusEnum.Descriptor instead.
func (StatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{2}
}

type Reporter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	BeContacted   *bool                  `protobuf:"varint,3,opt,name=be_contacted,json=beContacted,proto3,oneof" json:"be_contacted,omitempty"`
	Email         *string                `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Firstname     *string                `protobuf:"bytes,5,opt,name=firstname,proto3,oneof" json:"firstname,omitempty"`
	Lastname      *string                `protobuf:"bytes,6,opt,name=lastname,proto3,oneof" json:"lastname,omitempty"`
	Phone         *string                `protobuf:"bytes,7,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Status        *StatusEnum            `protobuf:"varint,8,opt,name=status,proto3,enum=proto.reporter.v1.StatusEnum,oneof" json:"status,omitempty"`
	CreatedAt     *string                `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	CreatedBy     *string                `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3,oneof" json:"created_by,omitempty"`
	UpdatedAt     *string                `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	UpdatedBy     *string                `protobuf:"bytes,12,opt,name=updated_by,json=updatedBy,proto3,oneof" json:"updated_by,omitempty"`
	Relations     []*v1.Relation         `protobuf:"bytes,13,rep,name=relations,proto3" json:"relations,omitempty"`
	Setlists      []*Setlist             `protobuf:"bytes,14,rep,name=setlists,proto3" json:"setlists,omitempty"`
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,15,opt,name=fields,proto3,oneof" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reporter) Reset() {
	*x = Reporter{}
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reporter) ProtoMessage() {}

func (x *Reporter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reporter.ProtoReflect.Descriptor instead.
func (*Reporter) Descriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{0}
}

func (x *Reporter) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Reporter) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Reporter) GetBeContacted() bool {
	if x != nil && x.BeContacted != nil {
		return *x.BeContacted
	}
	return false
}

func (x *Reporter) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Reporter) GetFirstname() string {
	if x != nil && x.Firstname != nil {
		return *x.Firstname
	}
	return ""
}

func (x *Reporter) GetLastname() string {
	if x != nil && x.Lastname != nil {
		return *x.Lastname
	}
	return ""
}

func (x *Reporter) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *Reporter) GetStatus() StatusEnum {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return StatusEnum_active
}

func (x *Reporter) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *Reporter) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *Reporter) GetUpdatedAt() string {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return ""
}

func (x *Reporter) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

func (x *Reporter) GetRelations() []*v1.Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *Reporter) GetSetlists() []*Setlist {
	if x != nil {
		return x.Setlists
	}
	return nil
}

func (x *Reporter) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{1}
}

func (x *GetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *ReporterFilter        `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Sort          SortEnum               `protobuf:"varint,2,opt,name=sort,proto3,enum=proto.reporter.v1.SortEnum" json:"sort,omitempty"`
	Desc          bool                   `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Limit         int64                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{2}
}

func (x *ListRequest) GetFilter() *ReporterFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRequest) GetSort() SortEnum {
	if x != nil {
		return x.Sort
	}
	return SortEnum_SORT_FIRSTNAME
}

func (x *ListRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *ListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Reporters     []*Reporter            `protobuf:"bytes,2,rep,name=reporters,proto3" json:"reporters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{3}
}

func (x *ListResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListResponse) GetReporters() []*Reporter {
	if x != nil {
		return x.Reporters
	}
	return nil
}

type Setlist struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReporterId    string                 `protobuf:"bytes,2,opt,name=reporter_id,json=reporterId,proto3" json:"reporter_id,omitempty"`
	Name          *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Setlist) Reset() {
	*x = Setlist{}
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Setlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setlist) ProtoMessage() {}

func (x *Setlist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setlist.ProtoReflect.Descriptor instead.
func (*Setlist) Descriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{4}
}

func (x *Setlist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Setlist) GetReporterId() string {
	if x != nil {
		return x.ReporterId
	}
	return ""
}

func (x *Setlist) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ReporterFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         FieldEnum              `protobuf:"varint,1,opt,name=field,proto3,enum=proto.reporter.v1.FieldEnum" json:"field,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Operator      v11.Operator           `protobuf:"varint,3,opt,name=operator,proto3,enum=proto.operator.v1.Operator" json:"operator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterFilter) Reset() {
	*x = ReporterFilter{}
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterFilter) ProtoMessage() {}

func (x *ReporterFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reporter_v1_reporter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterFilter.ProtoReflect.Descriptor instead.
func (*ReporterFilter) Descriptor() ([]byte, []int) {
	return file_proto_reporter_v1_reporter_proto_rawDescGZIP(), []int{5}
}

func (x *ReporterFilter) GetField() FieldEnum {
	if x != nil {
		return x.Field
	}
	return FieldEnum_FIELD_ID
}

func (x *ReporterFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReporterFilter) GetOperator() v11.Operator {
	if x != nil {
		return x.Operator
	}
	return v11.Operator(0)
}

var File_proto_reporter_v1_reporter_proto protoreflect.FileDescriptor

var file_proto_reporter_v1_reporter_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x0b, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x60, 0x01, 0x48, 0x03, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xba, 0x48, 0x3a, 0x72, 0x38, 0x32,
	0x36, 0x5e, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x2b, 0x3c, 0x3d,
	0x3e, 0xc2, 0xa3, 0x5e, 0x7e, 0x23, 0x25, 0x26, 0x2a, 0x40, 0x20, 0x5b, 0x5c, 0x5d, 0x7b, 0x7c,
	0x7d, 0x21, 0x22, 0x27, 0xe2, 0x80, 0x99, 0x29, 0x20, 0x28, 0x2c, 0x5f, 0x2e, 0x5c, 0x2f, 0x3a,
	0x3f, 0x0d, 0x0a, 0x2d, 0x5d, 0x2a, 0x24, 0x48, 0x04, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xba, 0x48, 0x3a, 0x72, 0x38,
	0x32, 0x36, 0x5e, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x2b, 0x3c,
	0x3d, 0x3e, 0xc2, 0xa3, 0x5e, 0x7e, 0x23, 0x25, 0x26, 0x2a, 0x40, 0x20, 0x5b, 0x5c, 0x5d, 0x7b,
	0x7c, 0x7d, 0x21, 0x22, 0x27, 0xe2, 0x80, 0x99, 0x29, 0x20, 0x28, 0x2c, 0x5f, 0x2e, 0x5c, 0x2f,
	0x3a, 0x3f, 0x0d, 0x0a, 0x2d, 0x5d, 0x2a, 0x24, 0x48, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x48, 0x21, 0x72, 0x1f, 0x32, 0x1d, 0x5e,
	0x5c, 0x2b, 0x7b, 0x30, 0x2c, 0x31, 0x7d, 0x5c, 0x64, 0x28, 0x28, 0x2d, 0x7c, 0x20, 0x7b, 0x30,
	0x2c, 0x31, 0x7d, 0x29, 0x5c, 0x64, 0x7c, 0x5c, 0x64, 0x29, 0x2a, 0x24, 0x48, 0x06, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x65, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x0c, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x26, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x5f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x70, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3d, 0xba, 0x48, 0x3a, 0x72, 0x38, 0x32, 0x36, 0x5e, 0x5b, 0x5c, 0x70, 0x7b,
	0x4c, 0x7d, 0x5c, 0x70, 0x7b, 0x4e, 0x7d, 0x2b, 0x3c, 0x3d, 0x3e, 0xc2, 0xa3, 0x5e, 0x7e, 0x23,
	0x25, 0x26, 0x2a, 0x40, 0x20, 0x5b, 0x5c, 0x5d, 0x7b, 0x7c, 0x7d, 0x21, 0x22, 0x27, 0xe2, 0x80,
	0x99, 0x29, 0x20, 0x28, 0x2c, 0x5f, 0x2e, 0x5c, 0x2f, 0x3a, 0x3f, 0x0d, 0x0a, 0x2d, 0x5d, 0x2a,
	0x24, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2a, 0x55, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x2a, 0x24, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x10, 0x01, 0x32, 0xc7, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x65, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x65, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x41, 0x70, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_proto_reporter_v1_reporter_proto_rawDescOnce sync.Once
	file_proto_reporter_v1_reporter_proto_rawDescData []byte
)

func file_proto_reporter_v1_reporter_proto_rawDescGZIP() []byte {
	file_proto_reporter_v1_reporter_proto_rawDescOnce.Do(func() {
		file_proto_reporter_v1_reporter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_reporter_v1_reporter_proto_rawDesc), len(file_proto_reporter_v1_reporter_proto_rawDesc)))
	})
	return file_proto_reporter_v1_reporter_proto_rawDescData
}

var file_proto_reporter_v1_reporter_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_reporter_v1_reporter_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_reporter_v1_reporter_proto_goTypes = []any{
	(FieldEnum)(0),                // 0: proto.reporter.v1.FieldEnum
	(SortEnum)(0),                 // 1: proto.reporter.v1.SortEnum
	(StatusEnum)(0),               // 2: proto.reporter.v1.StatusEnum
	(*Reporter)(nil),              // 3: proto.reporter.v1.Reporter
	(*GetRequest)(nil),            // 4: proto.reporter.v1.GetRequest
	(*ListRequest)(nil),           // 5: proto.reporter.v1.ListRequest
	(*ListResponse)(nil),          // 6: proto.reporter.v1.ListResponse
	(*Setlist)(nil),               // 7: proto.reporter.v1.Setlist
	(*ReporterFilter)(nil),        // 8: proto.reporter.v1.ReporterFilter
	(*v1.Relation)(nil),           // 9: proto.relation.v1.Relation
	(*fieldmaskpb.FieldMask)(nil), // 10: google.protobuf.FieldMask
	(v11.Operator)(0),             // 11: proto.operator.v1.Operator
	(*emptypb.Empty)(nil),         // 12: google.protobuf.Empty
}
var file_proto_reporter_v1_reporter_proto_depIdxs = []int32{
	2,  // 0: proto.reporter.v1.Reporter.status:type_name -> proto.reporter.v1.StatusEnum
	9,  // 1: proto.reporter.v1.Reporter.relations:type_name -> proto.relation.v1.Relation
	7,  // 2: proto.reporter.v1.Reporter.setlists:type_name -> proto.reporter.v1.Setlist
	10, // 3: proto.reporter.v1.Reporter.fields:type_name -> google.protobuf.FieldMask
	8,  // 4: proto.reporter.v1.ListRequest.filter:type_name -> proto.reporter.v1.ReporterFilter
	1,  // 5: proto.reporter.v1.ListRequest.sort:type_name -> proto.reporter.v1.SortEnum
	3,  // 6: proto.reporter.v1.ListResponse.reporters:type_name -> proto.reporter.v1.Reporter
	0,  // 7: proto.reporter.v1.ReporterFilter.field:type_name -> proto.reporter.v1.FieldEnum
	11, // 8: proto.reporter.v1.ReporterFilter.operator:type_name -> proto.operator.v1.Operator
	3,  // 9: proto.reporter.v1.ReporterService.Create:input_type -> proto.reporter.v1.Reporter
	4,  // 10: proto.reporter.v1.ReporterService.Get:input_type -> proto.reporter.v1.GetRequest
	5,  // 11: proto.reporter.v1.ReporterService.List:input_type -> proto.reporter.v1.ListRequest
	3,  // 12: proto.reporter.v1.ReporterService.Update:input_type -> proto.reporter.v1.Reporter
	9,  // 13: proto.reporter.v1.ReporterService.AddRelation:input_type -> proto.relation.v1.Relation
	9,  // 14: proto.reporter.v1.ReporterService.RemoveRelation:input_type -> proto.relation.v1.Relation
	7,  // 15: proto.reporter.v1.ReporterService.AddSetlist:input_type -> proto.reporter.v1.Setlist
	7,  // 16: proto.reporter.v1.ReporterService.RemoveSetlist:input_type -> proto.reporter.v1.Setlist
	3,  // 17: proto.reporter.v1.ReporterService.Create:output_type -> proto.reporter.v1.Reporter
	3,  // 18: proto.reporter.v1.ReporterService.Get:output_type -> proto.reporter.v1.Reporter
	6,  // 19: proto.reporter.v1.ReporterService.List:output_type -> proto.reporter.v1.ListResponse
	3,  // 20: proto.reporter.v1.ReporterService.Update:output_type -> proto.reporter.v1.Reporter
	12, // 21: proto.reporter.v1.ReporterService.AddRelation:output_type -> google.protobuf.Empty
	12, // 22: proto.reporter.v1.ReporterService.RemoveRelation:output_type -> google.protobuf.Empty
	12, // 23: proto.reporter.v1.ReporterService.AddSetlist:output_type -> google.protobuf.Empty
	12, // 24: proto.reporter.v1.ReporterService.RemoveSetlist:output_type -> google.protobuf.Empty
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_reporter_v1_reporter_proto_init() }
func file_proto_reporter_v1_reporter_proto_init() {
	if File_proto_reporter_v1_reporter_proto != nil {
		return
	}
	file_proto_reporter_v1_reporter_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_reporter_v1_reporter_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_reporter_v1_reporter_proto_rawDesc), len(file_proto_reporter_v1_reporter_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_reporter_v1_reporter_proto_goTypes,
		DependencyIndexes: file_proto_reporter_v1_reporter_proto_depIdxs,
		EnumInfos:         file_proto_reporter_v1_reporter_proto_enumTypes,
		MessageInfos:      file_proto_reporter_v1_reporter_proto_msgTypes,
	}.Build()
	File_proto_reporter_v1_reporter_proto = out.File
	file_proto_reporter_v1_reporter_proto_goTypes = nil
	file_proto_reporter_v1_reporter_proto_depIdxs = nil
}
