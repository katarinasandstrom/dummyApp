// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/relation/v1/relation.proto

package relationv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "dummyApp/gen/proto/operator/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldEnum int32

const (
	FieldEnum_FIELD_ARTIST_NAME        FieldEnum = 0
	FieldEnum_FIELD_REPORTER_FIRSTNAME FieldEnum = 1
	FieldEnum_FIELD_REPORTER_LASTNAME  FieldEnum = 2
	FieldEnum_FIELD_PERMISSION_NAME    FieldEnum = 3
)

// Enum value maps for FieldEnum.
var (
	FieldEnum_name = map[int32]string{
		0: "FIELD_ARTIST_NAME",
		1: "FIELD_REPORTER_FIRSTNAME",
		2: "FIELD_REPORTER_LASTNAME",
		3: "FIELD_PERMISSION_NAME",
	}
	FieldEnum_value = map[string]int32{
		"FIELD_ARTIST_NAME":        0,
		"FIELD_REPORTER_FIRSTNAME": 1,
		"FIELD_REPORTER_LASTNAME":  2,
		"FIELD_PERMISSION_NAME":    3,
	}
)

func (x FieldEnum) Enum() *FieldEnum {
	p := new(FieldEnum)
	*p = x
	return p
}

func (x FieldEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_relation_v1_relation_proto_enumTypes[0].Descriptor()
}

func (FieldEnum) Type() protoreflect.EnumType {
	return &file_proto_relation_v1_relation_proto_enumTypes[0]
}

func (x FieldEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldEnum.Descriptor instead.
func (FieldEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_relation_v1_relation_proto_rawDescGZIP(), []int{0}
}

type SortEnum int32

const (
	SortEnum_SORT_ARTIST_NAME        SortEnum = 0
	SortEnum_SORT_REPORTER_FIRSTNAME SortEnum = 1
	SortEnum_SORT_REPORTER_LASTNAME  SortEnum = 2
	SortEnum_SORT_PERMISSION_NAME    SortEnum = 3
)

// Enum value maps for SortEnum.
var (
	SortEnum_name = map[int32]string{
		0: "SORT_ARTIST_NAME",
		1: "SORT_REPORTER_FIRSTNAME",
		2: "SORT_REPORTER_LASTNAME",
		3: "SORT_PERMISSION_NAME",
	}
	SortEnum_value = map[string]int32{
		"SORT_ARTIST_NAME":        0,
		"SORT_REPORTER_FIRSTNAME": 1,
		"SORT_REPORTER_LASTNAME":  2,
		"SORT_PERMISSION_NAME":    3,
	}
)

func (x SortEnum) Enum() *SortEnum {
	p := new(SortEnum)
	*p = x
	return p
}

func (x SortEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_relation_v1_relation_proto_enumTypes[1].Descriptor()
}

func (SortEnum) Type() protoreflect.EnumType {
	return &file_proto_relation_v1_relation_proto_enumTypes[1]
}

func (x SortEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortEnum.Descriptor instead.
func (SortEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_relation_v1_relation_proto_rawDescGZIP(), []int{1}
}

type Relation struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ArtistId          string                 `protobuf:"bytes,1,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	ReporterId        string                 `protobuf:"bytes,2,opt,name=reporter_id,json=reporterId,proto3" json:"reporter_id,omitempty"`
	PermissionId      *string                `protobuf:"bytes,3,opt,name=permission_id,json=permissionId,proto3,oneof" json:"permission_id,omitempty"`
	ArtistName        *string                `protobuf:"bytes,4,opt,name=artist_name,json=artistName,proto3,oneof" json:"artist_name,omitempty"`
	ReporterFirstname *string                `protobuf:"bytes,5,opt,name=reporter_firstname,json=reporterFirstname,proto3,oneof" json:"reporter_firstname,omitempty"`
	ReporterLastname  *string                `protobuf:"bytes,6,opt,name=reporter_lastname,json=reporterLastname,proto3,oneof" json:"reporter_lastname,omitempty"`
	PermissionName    *string                `protobuf:"bytes,7,opt,name=permission_name,json=permissionName,proto3,oneof" json:"permission_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Relation) Reset() {
	*x = Relation{}
	mi := &file_proto_relation_v1_relation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_relation_v1_relation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_proto_relation_v1_relation_proto_rawDescGZIP(), []int{0}
}

func (x *Relation) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *Relation) GetReporterId() string {
	if x != nil {
		return x.ReporterId
	}
	return ""
}

func (x *Relation) GetPermissionId() string {
	if x != nil && x.PermissionId != nil {
		return *x.PermissionId
	}
	return ""
}

func (x *Relation) GetArtistName() string {
	if x != nil && x.ArtistName != nil {
		return *x.ArtistName
	}
	return ""
}

func (x *Relation) GetReporterFirstname() string {
	if x != nil && x.ReporterFirstname != nil {
		return *x.ReporterFirstname
	}
	return ""
}

func (x *Relation) GetReporterLastname() string {
	if x != nil && x.ReporterLastname != nil {
		return *x.ReporterLastname
	}
	return ""
}

func (x *Relation) GetPermissionName() string {
	if x != nil && x.PermissionName != nil {
		return *x.PermissionName
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArtistId      *string                `protobuf:"bytes,1,opt,name=artist_id,json=artistId,proto3,oneof" json:"artist_id,omitempty"`
	PermissionId  *string                `protobuf:"bytes,2,opt,name=permission_id,json=permissionId,proto3,oneof" json:"permission_id,omitempty"`
	ReporterId    *string                `protobuf:"bytes,3,opt,name=reporter_id,json=reporterId,proto3,oneof" json:"reporter_id,omitempty"`
	Filter        *RelationFilter        `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Sort          SortEnum               `protobuf:"varint,5,opt,name=sort,proto3,enum=proto.relation.v1.SortEnum" json:"sort,omitempty"`
	Desc          bool                   `protobuf:"varint,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Limit         int64                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_proto_relation_v1_relation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_relation_v1_relation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_proto_relation_v1_relation_proto_rawDescGZIP(), []int{1}
}

func (x *ListRequest) GetArtistId() string {
	if x != nil && x.ArtistId != nil {
		return *x.ArtistId
	}
	return ""
}

func (x *ListRequest) GetPermissionId() string {
	if x != nil && x.PermissionId != nil {
		return *x.PermissionId
	}
	return ""
}

func (x *ListRequest) GetReporterId() string {
	if x != nil && x.ReporterId != nil {
		return *x.ReporterId
	}
	return ""
}

func (x *ListRequest) GetFilter() *RelationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRequest) GetSort() SortEnum {
	if x != nil {
		return x.Sort
	}
	return SortEnum_SORT_ARTIST_NAME
}

func (x *ListRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *ListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Relations     []*Relation            `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_proto_relation_v1_relation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_relation_v1_relation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_proto_relation_v1_relation_proto_rawDescGZIP(), []int{2}
}

func (x *ListResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListResponse) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

type RelationFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         FieldEnum              `protobuf:"varint,1,opt,name=field,proto3,enum=proto.relation.v1.FieldEnum" json:"field,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Operator      v1.Operator            `protobuf:"varint,3,opt,name=operator,proto3,enum=proto.operator.v1.Operator" json:"operator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationFilter) Reset() {
	*x = RelationFilter{}
	mi := &file_proto_relation_v1_relation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationFilter) ProtoMessage() {}

func (x *RelationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_relation_v1_relation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationFilter.ProtoReflect.Descriptor instead.
func (*RelationFilter) Descriptor() ([]byte, []int) {
	return file_proto_relation_v1_relation_proto_rawDescGZIP(), []int{3}
}

func (x *RelationFilter) GetField() FieldEnum {
	if x != nil {
		return x.Field
	}
	return FieldEnum_FIELD_ARTIST_NAME
}

func (x *RelationFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RelationFilter) GetOperator() v1.Operator {
	if x != nil {
		return x.Operator
	}
	return v1.Operator(0)
}

var File_proto_relation_v1_relation_proto protoreflect.FileDescriptor

var file_proto_relation_v1_relation_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x03, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdc, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x53,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xba,
	0x48, 0x3a, 0x72, 0x38, 0x32, 0x36, 0x5e, 0x5b, 0x5c, 0x70, 0x7b, 0x4c, 0x7d, 0x5c, 0x70, 0x7b,
	0x4e, 0x7d, 0x2b, 0x3c, 0x3d, 0x3e, 0xc2, 0xa3, 0x5e, 0x7e, 0x23, 0x25, 0x26, 0x2a, 0x40, 0x20,
	0x5b, 0x5c, 0x5d, 0x7b, 0x7c, 0x7d, 0x21, 0x22, 0x27, 0xe2, 0x80, 0x99, 0x29, 0x20, 0x28, 0x2c,
	0x5f, 0x2e, 0x5c, 0x2f, 0x3a, 0x3f, 0x0d, 0x0a, 0x2d, 0x5d, 0x2a, 0x24, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2a, 0x78, 0x0a, 0x09,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x32, 0xe8, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x41,
	0x70, 0x70, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_relation_v1_relation_proto_rawDescOnce sync.Once
	file_proto_relation_v1_relation_proto_rawDescData []byte
)

func file_proto_relation_v1_relation_proto_rawDescGZIP() []byte {
	file_proto_relation_v1_relation_proto_rawDescOnce.Do(func() {
		file_proto_relation_v1_relation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_relation_v1_relation_proto_rawDesc), len(file_proto_relation_v1_relation_proto_rawDesc)))
	})
	return file_proto_relation_v1_relation_proto_rawDescData
}

var file_proto_relation_v1_relation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_relation_v1_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_relation_v1_relation_proto_goTypes = []any{
	(FieldEnum)(0),         // 0: proto.relation.v1.FieldEnum
	(SortEnum)(0),          // 1: proto.relation.v1.SortEnum
	(*Relation)(nil),       // 2: proto.relation.v1.Relation
	(*ListRequest)(nil),    // 3: proto.relation.v1.ListRequest
	(*ListResponse)(nil),   // 4: proto.relation.v1.ListResponse
	(*RelationFilter)(nil), // 5: proto.relation.v1.RelationFilter
	(v1.Operator)(0),       // 6: proto.operator.v1.Operator
}
var file_proto_relation_v1_relation_proto_depIdxs = []int32{
	5, // 0: proto.relation.v1.ListRequest.filter:type_name -> proto.relation.v1.RelationFilter
	1, // 1: proto.relation.v1.ListRequest.sort:type_name -> proto.relation.v1.SortEnum
	2, // 2: proto.relation.v1.ListResponse.relations:type_name -> proto.relation.v1.Relation
	0, // 3: proto.relation.v1.RelationFilter.field:type_name -> proto.relation.v1.FieldEnum
	6, // 4: proto.relation.v1.RelationFilter.operator:type_name -> proto.operator.v1.Operator
	2, // 5: proto.relation.v1.RelationService.Create:input_type -> proto.relation.v1.Relation
	3, // 6: proto.relation.v1.RelationService.List:input_type -> proto.relation.v1.ListRequest
	2, // 7: proto.relation.v1.RelationService.Update:input_type -> proto.relation.v1.Relation
	2, // 8: proto.relation.v1.RelationService.Create:output_type -> proto.relation.v1.Relation
	4, // 9: proto.relation.v1.RelationService.List:output_type -> proto.relation.v1.ListResponse
	2, // 10: proto.relation.v1.RelationService.Update:output_type -> proto.relation.v1.Relation
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_relation_v1_relation_proto_init() }
func file_proto_relation_v1_relation_proto_init() {
	if File_proto_relation_v1_relation_proto != nil {
		return
	}
	file_proto_relation_v1_relation_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_relation_v1_relation_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_relation_v1_relation_proto_rawDesc), len(file_proto_relation_v1_relation_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_relation_v1_relation_proto_goTypes,
		DependencyIndexes: file_proto_relation_v1_relation_proto_depIdxs,
		EnumInfos:         file_proto_relation_v1_relation_proto_enumTypes,
		MessageInfos:      file_proto_relation_v1_relation_proto_msgTypes,
	}.Build()
	File_proto_relation_v1_relation_proto = out.File
	file_proto_relation_v1_relation_proto_goTypes = nil
	file_proto_relation_v1_relation_proto_depIdxs = nil
}
